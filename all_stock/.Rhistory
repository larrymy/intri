dss1 <- sapply(1:sim, FUN = function(ss){
nshare <<- 0
s0 <<- 49
ss1 <- sapply(0:(numperiod), FUN = function(i){
t <- 1/numperiod_year; t2 <- TT - i/numperiod_year
meanlog = log(s0)+(r-s^2/2)*t
sdlog = sqrt((s^2)*t)
s0 <<- round(rlnorm(n = 1, meanlog, sdlog),2)
return(s0)
})
return(ss1[length(ss1)])
})
s0 = 49
r = 0.1
s = 0.3
TT = 60/252
K = 50
meanlog = log(s0)+(r-s^2/2)*TT
sdlog = sqrt((s^2)*T)
x <- rlnorm(n = 10000, meanlog, sdlog)
par(mfrow = c(2,1))
hist(x); hist(dss1)
summary(x); summary(dss1)
s0 = 49
r = 0.1
s = 0.3
# TT = 60/252
j = 1
numperiod <- 60*j
numperiod_year <- 252*j
TT = numperiod/numperiod_year
K = 50
share <- 100000
sim <- 100000
dss1 <- sapply(1:sim, FUN = function(ss){
nshare <<- 0
s0 <<- 49
ss1 <- sapply(0:(numperiod), FUN = function(i){
t <- 1/numperiod_year; t2 <- TT - i/numperiod_year
meanlog = log(s0)+(r-s^2/2)*t
sdlog = sqrt((s^2)*t)
s0 <<- round(rlnorm(n = 1, meanlog, sdlog),2)
return(s0)
})
return(ss1[length(ss1)])
})
s0 = 49
r = 0.1
s = 0.3
TT = 60/252
K = 50
meanlog = log(s0)+(r-s^2/2)*TT
sdlog = sqrt((s^2)*T)
x <- rlnorm(n = 100000, meanlog, sdlog)
par(mfrow = c(2,1))
hist(x); hist(dss1)
summary(x); summary(dss1)
library(xml2)
library(rvest)
library(quantmod)
library(plyr); library(dplyr)
url <- "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
html_file <- xml2::read_html(url)
tables <- rvest::html_nodes(html_file, "table")
table1 <- rvest::html_table(tables[1], fill = TRUE, header = TRUE)[[1]] #tables[4] for compressed data
sp_symbols <- backup_symbols <- table1[,1]
# install.packages("plyr")
# install.packages("dplyr")
library(xml2)
library(rvest)
library(plyr); library(dplyr)
url <- "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
html_file <- xml2::read_html(url)
tables <- rvest::html_nodes(html_file, "table")
table1 <- rvest::html_table(tables[1], fill = TRUE, header = TRUE)[[1]] #tables[4] for compressed data
sp_symbols <- backup_symbols <- table1[,1]
sp_symbols
write.csv(sp_symbols, file = "sp_500_tickers.csv", row.names = F)
df_tickers <- data.frame(ticker = sp_symbols)
write.csv(df_tickers, file = "sp_500_tickers.csv", row.names = F)
df_tickers <- data.frame(ticker = sp_symbols)
write.csv(df_tickers, file = "sp_500_tickers.csv", row.names = F)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
plot(a)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
plot(a)
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
plot(price)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
plot(a)
plot(price)
plot(a)
plot(price)
plot(a)
a[60*24*60]
a[length(a)]
price[length(price)]
a
tail(a)
price
a[60*24*1]
price[1]
a[60*24*2]
price[2]
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
a[60*24*2]
price[2]
plot(a)
plot(price)
zz <- sapply(1:sim, FUN = function(x){
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
})
sim <- 10000
zz <- sapply(1:sim, FUN = function(x){
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
})
sim <- 10000
zz <- sapply(1:sim, FUN = function(x){
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
sim <- 1000
zz <- sapply(1:sim, FUN = function(x){
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
hist(zz)
summary(zz)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
sim <- 100
zz <- sapply(1:sim, FUN = function(x){
s0 = 49
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
hist(zz)
summary(zz)
s0 = 49
r = 0.1
s = 0.3
TT = 60/252
K = 50
meanlog = log(s0)+(r-s^2/2)*TT
sdlog = sqrt((s^2)*T)
x <- rlnorm(n = 1000000, meanlog, sdlog)
hist(x)
summary(x)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
sim <- 1000
zz <- sapply(1:sim, FUN = function(x){
s0 = 49
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
s0 = 49
r = 0.1
s = 0.3
TT = 60/252
K = 50
meanlog = log(s0)+(r-s^2/2)*TT
sdlog = sqrt((s^2)*T)
x <- rlnorm(n = 1000000, meanlog, sdlog)
hist(x)
hist(zz)
rlnorm(
summary(x)
summary(zz)
library(jsonlite)
x <- toJSON(res1)
data(mtcars)
x <- toJSON(mtcars)
cat(x)
x
system.time({
s0 = 49
r = 0.1
s = 0.3
dfactor <- 0.2 #0.2
numperiod <- 60*dfactor
numperiod_year <- 252*dfactor
TT = numperiod/numperiod_year
K = 50
share = 1
#simulate 250 days, 1 row = 60 second
len <- 60*60*24*252/(60*12)
dt <- 1/len
sim = 100
list_of_simulated_price <- lapply(1:sim, FUN = function(x){
s0 <<- 49
price <- sapply(1:len, FUN = function(h){
ds = r*s0*dt + s*s0*rnorm(1, 0, sqrt(dt))
s0 <<- s0 + ds
})
sub_daily <- sapply(1:252, FUN = function(j){
price[len/252*j]
})
sub_weekly <- sapply(1:50, FUN = function(j){
price[len*j/(50)]
})
return(list(price, sub_daily, sub_weekly));
})
sim_cost <- sapply(list_of_simulated_price, FUN = function(list){
#only subset 60 days eventually
v_daily <- list[[3]][1:12]
v2_daily <- c(49, v_daily)
#perform hedging
fshare <<- 0
s0 <<- 49
cost_v <- vector()
for(i in (0:(12-1))){
t <- TT - i/numperiod_year
s_t <- v2_daily[i+1]
d1 <- (log(s_t/K) + (r+s^2/2)*t) / (s*sqrt(t))
Nd1 <- pnorm(d1)
chgshare <- share*Nd1 - fshare
fshare <<- fshare + chgshare
# print(c(s_t, Nd1, fshare, chgshare))
cost <- chgshare*s_t
compounded_cost <- cost*exp(r*t)
cost_v <- c(cost_v, compounded_cost)
}
if(s_t > K){
ex_pay <- 50
}else{
ex_pay <- 0
}
ss_cost <- sum(cost_v)/share - ex_pay*share
return(ss_cost);
})
})
hist(sim_cost)
# sim_cost
mean(sim_cost)
library(quandl)
library(quanmod)
library(quantmod)
yinxing <- getSymbols('^N225', auto.assign = FALSE, from = '2015-10-10')
nikkei <- getSymbols('^N225', auto.assign = FALSE, from = '2015-10-10')
nikkei
nikkei225 <- getSymbols('^N225', auto.assign = FALSE, from = '2015-10-10')
sp500 <- getSymbols('^GSPC', auto.assign = FALSE, from = '2015-10-10')
ftse100 <- getSymbols('^FTSE', auto.assign = FALSE, from = '2015-10-10')
sp500
ftse100
nikkei225 <- getSymbols('^N225', auto.assign = FALSE, from = '2016-01-01')
sp500 <- getSymbols('^GSPC', auto.assign = FALSE, from = '2016-01-01')
ftse100 <- getSymbols('^FTSE', auto.assign = FALSE, from = '2016-01-01')
nikkei225
View(nikkei225)
na.omit(nikkei225)
nikkei225_f <- na.omit(nikkei225)
getFX("USD/JPY")
USDJPY
getFX("USD/JPY", from = "2016-01-01")
getFX("GBP/USD")
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4))
a
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3)
a
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3, byrow = T)
a
a^
a^3
A %^% 3
a %^% 3
powA = function(n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,3)
powA = function(a, n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,3)
powA = function(a, n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,3)
powA(a,n=3)
powA = function(a, n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,n=3)
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3, byrow = T)
pow <- function(mat, n){
while(n>1){
mat <- mat %*% mat
n = n-1
}
return(mat)
}
pow(a,3)
a%*%a%*%a
a%*%a%*%a
a%*%a%*%a%*%a
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3, byrow = T)
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(mat)
}
pow(a,3)
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(mat)
}
pow(a,3)
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(temp)
}
pow(a,3)
a%*%a%*%a
pow(a,4)
a <- matrix(c(0.2,0.8,0,0.2,0,0.8,0,0.2,0.8), 3,3, byrow = T)
a%*%a%*%a
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(temp)
}
pow(a,4)
B <- matrix(c(0.2,0.8,0,0,0,
0.2,0,0.8,0,0,
0,0.2,0,0,0.8,
0.2,0,0,0,0.8,
0,0,0,0.2,0.8), 5,5)
B <- matrix(c(0.2,0.8,0,0,0,
0.2,0,0.8,0,0,
0,0.2,0,0,0.8,
0.2,0,0,0,0.8,
0,0,0,0.2,0.8), 5,5, byrow=T)
B
pow(B,4)
library(httr)
#daily all stocks
# https://api.intrinio.com/prices/exchange.csv?identifier=^XKLS&price_date=2017-09-21
# https://api.intrinio.com/prices.csv?ticker=$SPX
# https://api.intrinio.com/prices.csv?ticker=$SPX
# https://api.intrinio.com/prices.csv?identifier=WLW:MK
# https://d82a8b255816b922a436ab6ffb177ec3:92ad8da92b80534003d9f134ec1f82a5@api.intrinio.com/prices.csv?identifier=WLW:MK
# download.file("https://d82a8b255816b922a436ab6ffb177ec3:92ad8da92b80534003d9f134ec1f82a5@api.intrinio.com/prices.csv?identifier=WLW:MK", destfile = "test.csv")
prices <- function(ticker){
price_base <- "https://api.intrinio.com/prices?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base,ticker,sep="")
tp <- GET(price, authenticate(username, password, type = "basic"))
z <- unlist(content(tp,"parsed"))
n=length(z)
b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
names(b)=names(z)[1:13]
return(b)
}
prices_csv <- function(ticker){
price_base_1 <- "https://"
price_base_2 <- "@api.intrinio.com/prices.csv?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base_1, username, ":", password, price_base_2, ticker,sep="")
fname <- paste0(strsplit(ticker, ":")[[1]][1], ".csv")
download.file(url = price, destfile = fname)
# b <- read.csv(price, stringsAsFactors = F)
# tp <- GET(price, authenticate(username, password, type = "basic"))
# z <- unlist(content(tp,"parsed"))
# n=length(z)
# b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
# names(b)=names(z)[1:13]
# return(z)
}
# 1 stock
# setwd("C:/Users/jy/Desktop/")
setwd("C:/Users/jy/Desktop/intrinio")
all_securities <- read.csv("securities_xkls.csv", stringsAsFactors = F, skip = 1)
u1 <- all_securities[, "SECURITY_TYPE"] == "Common Stock"
all_ticker <- all_securities[u1, "FIGI_TICKER"]
setwd("C:/Users/jy/Desktop/all_stock")
N <- length(all_ticker)
for(i in all_ticker){
prices_csv(i)
}
