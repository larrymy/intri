})
sim <- 10000
zz <- sapply(1:sim, FUN = function(x){
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
sim <- 1000
zz <- sapply(1:sim, FUN = function(x){
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
hist(zz)
summary(zz)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
sim <- 100
zz <- sapply(1:sim, FUN = function(x){
s0 = 49
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
hist(zz)
summary(zz)
s0 = 49
r = 0.1
s = 0.3
TT = 60/252
K = 50
meanlog = log(s0)+(r-s^2/2)*TT
sdlog = sqrt((s^2)*T)
x <- rlnorm(n = 1000000, meanlog, sdlog)
hist(x)
summary(x)
num_int <- 60*24*60
dt = 1/num_int
s0 = 49
r = 0.1
s = 0.3
sim <- 1000
zz <- sapply(1:sim, FUN = function(x){
s0 = 49
a <- sapply(1:num_int, FUN = function(t){
# for(t in 1:num_int){
dz = rnorm(1, 0, sqrt(dt))
ds = r*s0*dt + s*s0*dz
s0 <<- s0 + ds
return(s0)
})
price <- sapply(1:60, FUN = function(h){
a[60*24*h]
})
price[length(price)]
})
s0 = 49
r = 0.1
s = 0.3
TT = 60/252
K = 50
meanlog = log(s0)+(r-s^2/2)*TT
sdlog = sqrt((s^2)*T)
x <- rlnorm(n = 1000000, meanlog, sdlog)
hist(x)
hist(zz)
rlnorm(
summary(x)
summary(zz)
library(jsonlite)
x <- toJSON(res1)
data(mtcars)
x <- toJSON(mtcars)
cat(x)
x
system.time({
s0 = 49
r = 0.1
s = 0.3
dfactor <- 0.2 #0.2
numperiod <- 60*dfactor
numperiod_year <- 252*dfactor
TT = numperiod/numperiod_year
K = 50
share = 1
#simulate 250 days, 1 row = 60 second
len <- 60*60*24*252/(60*12)
dt <- 1/len
sim = 100
list_of_simulated_price <- lapply(1:sim, FUN = function(x){
s0 <<- 49
price <- sapply(1:len, FUN = function(h){
ds = r*s0*dt + s*s0*rnorm(1, 0, sqrt(dt))
s0 <<- s0 + ds
})
sub_daily <- sapply(1:252, FUN = function(j){
price[len/252*j]
})
sub_weekly <- sapply(1:50, FUN = function(j){
price[len*j/(50)]
})
return(list(price, sub_daily, sub_weekly));
})
sim_cost <- sapply(list_of_simulated_price, FUN = function(list){
#only subset 60 days eventually
v_daily <- list[[3]][1:12]
v2_daily <- c(49, v_daily)
#perform hedging
fshare <<- 0
s0 <<- 49
cost_v <- vector()
for(i in (0:(12-1))){
t <- TT - i/numperiod_year
s_t <- v2_daily[i+1]
d1 <- (log(s_t/K) + (r+s^2/2)*t) / (s*sqrt(t))
Nd1 <- pnorm(d1)
chgshare <- share*Nd1 - fshare
fshare <<- fshare + chgshare
# print(c(s_t, Nd1, fshare, chgshare))
cost <- chgshare*s_t
compounded_cost <- cost*exp(r*t)
cost_v <- c(cost_v, compounded_cost)
}
if(s_t > K){
ex_pay <- 50
}else{
ex_pay <- 0
}
ss_cost <- sum(cost_v)/share - ex_pay*share
return(ss_cost);
})
})
hist(sim_cost)
# sim_cost
mean(sim_cost)
library(quandl)
library(quanmod)
library(quantmod)
yinxing <- getSymbols('^N225', auto.assign = FALSE, from = '2015-10-10')
nikkei <- getSymbols('^N225', auto.assign = FALSE, from = '2015-10-10')
nikkei
nikkei225 <- getSymbols('^N225', auto.assign = FALSE, from = '2015-10-10')
sp500 <- getSymbols('^GSPC', auto.assign = FALSE, from = '2015-10-10')
ftse100 <- getSymbols('^FTSE', auto.assign = FALSE, from = '2015-10-10')
sp500
ftse100
nikkei225 <- getSymbols('^N225', auto.assign = FALSE, from = '2016-01-01')
sp500 <- getSymbols('^GSPC', auto.assign = FALSE, from = '2016-01-01')
ftse100 <- getSymbols('^FTSE', auto.assign = FALSE, from = '2016-01-01')
nikkei225
View(nikkei225)
na.omit(nikkei225)
nikkei225_f <- na.omit(nikkei225)
getFX("USD/JPY")
USDJPY
getFX("USD/JPY", from = "2016-01-01")
getFX("GBP/USD")
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4))
a
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3)
a
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3, byrow = T)
a
a^
a^3
A %^% 3
a %^% 3
powA = function(n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,3)
powA = function(a, n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,3)
powA = function(a, n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,3)
powA(a,n=3)
powA = function(a, n)
{
if (n==1)  return (a)
if (n==2)  return (a%*%a)
if (n>2) return ( a%*%powA(n-1))
}
powA(a,n=3)
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3, byrow = T)
pow <- function(mat, n){
while(n>1){
mat <- mat %*% mat
n = n-1
}
return(mat)
}
pow(a,3)
a%*%a%*%a
a%*%a%*%a
a%*%a%*%a%*%a
a <- matrix(c(0.9,0.1,0,0.25,0,0.75,0.2,0.4,0.4), 3,3, byrow = T)
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(mat)
}
pow(a,3)
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(mat)
}
pow(a,3)
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(temp)
}
pow(a,3)
a%*%a%*%a
pow(a,4)
a <- matrix(c(0.2,0.8,0,0.2,0,0.8,0,0.2,0.8), 3,3, byrow = T)
a%*%a%*%a
pow <- function(mat, n){
temp <- mat
while(n>1){
temp <- temp %*% mat
n = n-1
}
return(temp)
}
pow(a,4)
B <- matrix(c(0.2,0.8,0,0,0,
0.2,0,0.8,0,0,
0,0.2,0,0,0.8,
0.2,0,0,0,0.8,
0,0,0,0.2,0.8), 5,5)
B <- matrix(c(0.2,0.8,0,0,0,
0.2,0,0.8,0,0,
0,0.2,0,0,0.8,
0.2,0,0,0,0.8,
0,0,0,0.2,0.8), 5,5, byrow=T)
B
pow(B,4)
library(httr)
base <- "https://api.intrinio.com/"
endpoint <- "data_point"
stock <- "AAPL"
item1 <- "close_price"
item2 <- "pricetoearnings"
call1 <- paste(base,endpoint,"?","ticker","=", stock, "&","item","=",item1, sep="")
call2 <- paste(base,endpoint,"?","ticker","=", stock, "&","item","=",item2, sep="")
call1
ticker <- "MTI:MK"
price_base <- "https://api.intrinio.com/prices?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base,ticker,sep="")
tp <- GET(price, authenticate(username, password, type = "basic"))
tp
z <- unlist(content(tp,"parsed"))
z
n=length(z)
n
b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
names(b)=names(z)[1:13]
b
prices <- function(ticker){
price_base <- "https://api.intrinio.com/prices?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base,ticker,sep="")
tp <- GET(price, authenticate(username, password, type = "basic"))
z <- unlist(content(tp,"parsed"))
n=length(z)
b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
names(b)=names(z)[1:13]
return(b)
}
df <- prices("WLW:MK")
df
nrow(df)
tp
z
tail(z)
prices_csv <- function(ticker){
price_base <- "https://api.intrinio.com/prices.csv?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base,ticker,sep="")
b <- read.csv(price, stringsAsFactors = F)
# tp <- GET(price, authenticate(username, password, type = "basic"))
# z <- unlist(content(tp,"parsed"))
# n=length(z)
# b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
# names(b)=names(z)[1:13]
return(b)
}
df2 <- prices_csv("MTI:MK")
df <- prices("WLW:MK")
df
df2 <- prices_csv("MTI:MK")
prices_csv <- function(ticker){
price_base <- "https://api.intrinio.com/prices.csv?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base,ticker,sep="")
# b <- read.csv(price, stringsAsFactors = F)
tp <- GET(price, authenticate(username, password, type = "basic"))
# z <- unlist(content(tp,"parsed"))
# n=length(z)
# b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
# names(b)=names(z)[1:13]
return(tp)
}
df2 <- prices_csv("MTI:MK")
df2
str(df2)
z <- unlist(content(df2,"parsed"))
z
tp
df2
read.csv(df2)
str(df2)
df2[[1]]
df2[[2]]
df2[[3]]
df2[[4]]
df2[[5]]
df2[[6]]
df2[[7]]
df2[[8]]
df2[[9]]
df2[[10]]
df2
tail(df2)
head(df2)
z
z[2600:2700]
z[2500:2550]
prices_csv <- function(ticker){
price_base <- "https://api.intrinio.com/prices.csv?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base,ticker,sep="")
# b <- read.csv(price, stringsAsFactors = F)
tp <- GET(price, authenticate(username, password, type = "basic"))
z <- unlist(content(tp,"parsed"))
# n=length(z)
# b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
# names(b)=names(z)[1:13]
return(z)
}
z
grep(z, "OPEN")
grep(z, pattern = "OPEN")
grep(z, pattern = "DATE")
N <- b-a-1
a <- grep(z, pattern = "OPEN")
N <- b-a-1
b <- grep(z, pattern = "DATE")
b=as.data.frame(matrix(z[1:(13*N-5)],(13*N-5)/13, byrow = T))
N <- b-a-1
b=as.data.frame(matrix(z[1:(13*N-5)],(13*N-5)/13, byrow = T))
b=as.data.frame(matrix(z[1:(2*N-5)],(2*N-5)/13, byrow = T))
N
N <- a-b-1
b=as.data.frame(matrix(z[1:(2*N-5)],(2*N-5)/13, byrow = T))
b
b=as.data.frame(matrix(z[1:(N-5)],(N-5)/13, byrow = T))
b=as.data.frame(matrix(z[1:((N-5)*13)],(N-5)/13, byrow = T))
b
b=as.data.frame(matrix(z[1:N)],nrow = N+1, ncol = 7, byrow = T))
b=as.data.frame(matrix(z[1:N],nrow = N+1, ncol = 7, byrow = T))
b
N
z[1:N]
z[1:(N+1)]
z[1:(N+2)]
z[1:(N+3)]
tail(z[1:(N+3)])
tail(z[1:(N+1)])
tail(z[1:(N+2)])
b=as.data.frame(matrix(z[1:(N+1)],nrow = N+1, ncol = 1, byrow = T))
b
b=as.data.frame(matrix(z[1:(2*(N+1))],nrow = N+1, ncol = 2, byrow = T))
b
2*(N+1)
tail(z[1:(2*(N+1))])
b=as.data.frame(matrix(z[1:(2*(N+1))],nrow = N+1, ncol = 2, byrow = T))
b
tail(b)
b=as.data.frame(matrix(z[1:(2*(N+1))],nrow = N+1, ncol = 2, byrow = f))
b=as.data.frame(matrix(z[1:(2*(N+1))],nrow = N+1, ncol = 2, byrow = F))
b
k = 13
b=as.data.frame(matrix(z[1:(k*(N+1))],nrow = N+1, ncol = k, byrow = F))
b
z
tp
tp
df2
k = 11
b=as.data.frame(matrix(z[1:(k*(N+1))],nrow = N+1, ncol = k, byrow = F))
b
download.file("https://d82a8b255816b922a436ab6ffb177ec3:92ad8da92b80534003d9f134ec1f82a5@api.intrinio.com/prices.csv?identifier=WLW:MK")
setwd("C:/Users/jy/Desktop")
download.file("https://d82a8b255816b922a436ab6ffb177ec3:92ad8da92b80534003d9f134ec1f82a5@api.intrinio.com/prices.csv?identifier=WLW:MK", destfile = "test.csv")
strsplit("WLW:MK", ":")
strsplit("WLW:MK", ":")[[1]][1]
prices_csv <- function(ticker){
price_base_1 <- "https://"
price_base_2 <- "@api.intrinio.com/prices.csv?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base_1, username, ":", password, ticker,sep="")
fname <- paste0(strsplit(ticker, ":")[[1]][1], ".csv")
download.file(url = price, destfile = fname)
# b <- read.csv(price, stringsAsFactors = F)
# tp <- GET(price, authenticate(username, password, type = "basic"))
# z <- unlist(content(tp,"parsed"))
# n=length(z)
# b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
# names(b)=names(z)[1:13]
# return(z)
}
setwd("C:/Users/jy/Desktop")
prices_csv("PENT:MK")
prices_csv <- function(ticker){
price_base_1 <- "https://"
price_base_2 <- "@api.intrinio.com/prices.csv?identifier="
username <- "d82a8b255816b922a436ab6ffb177ec3"
password <- "92ad8da92b80534003d9f134ec1f82a5"
price <- paste(price_base_1, username, ":", password, price_base_2, ticker,sep="")
fname <- paste0(strsplit(ticker, ":")[[1]][1], ".csv")
download.file(url = price, destfile = fname)
# b <- read.csv(price, stringsAsFactors = F)
# tp <- GET(price, authenticate(username, password, type = "basic"))
# z <- unlist(content(tp,"parsed"))
# n=length(z)
# b=as.data.frame(matrix(z[1:(n-5)],(n-5)/13, byrow = T))
# names(b)=names(z)[1:13]
# return(z)
}
setwd("C:/Users/jy/Desktop")
prices_csv("PENT:MK")
setwd("C:/Users/jy/Desktop/intrinio")
read.csv("securities_xkls.csv", stringsAsFactors = F)
read.csv("securities_xkls.csv", stringsAsFactors = F, skip = 1)
all_securities <- read.csv("securities_xkls.csv", stringsAsFactors = F, skip = 1)
head(all_securities)
u1 <- all_securities[, "SECURITY_TYPE"] == "Common Stock"
all_ticker <- all_securities[u1, "FIGI_TICKER"]
all_ticker
all_ticker
setwd("C:/Users/jy/Desktop/intrinio")
all_securities <- read.csv("securities_xkls.csv", stringsAsFactors = F, skip = 1)
u1 <- all_securities[, "SECURITY_TYPE"] == "Common Stock"
all_ticker <- all_securities[u1, "FIGI_TICKER"]
setwd("C:/Users/jy/Desktop/all_stock")
for(i in all_ticker[1:5]){
prices_csv(i)
}
N <- length(all_ticker)
N <- length(all_ticker)
for(i in all_ticker[6:100]){
prices_csv(i)
}
