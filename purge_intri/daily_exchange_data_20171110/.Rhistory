contact = paste0("_", Phone..Billing.[1]),
email = Email..Billing.[1],
address = Address.2..Billing.[1],
num_items_purchased = length(fullname_upper)) %>%
select(-1)
return(jsonlite::toJSON(as.data.frame(customer_df)))
}
fav_list <- function(file2){
# print(file2)
a <- jsonlite::toJSON(file2)
print(a)
df <- read.csv(file2[[4]])
getsupp <- function(v){
v <- as.character(v)
supp <- c("Mr Rice Corner", "Pontian Noodle", "Meet Mee", "Lim Fried Chicken")
h <- v
for(suppj in supp){
h[grep(pattern = suppj, v, ignore.case = T)] <- suppj
}
return(h)
}
fav <- function(foodname, order, count = F){
uniq <- unique(foodname)
ss <- sapply(uniq, FUN = function(j){
sum(foodname == j, na.rm = T)
})
dd <- data.frame(uniq,ss)
if(count){
return(dd[order(ss, decreasing = T),][order,2])
}else{
return(dd[order(ss, decreasing = T),][order,1])
}
}
favfood_df <- df %>% mutate(supplier = getsupp(Category)) %>%
group_by(supplier) %>%
summarise(
fav_1st = fav(Name, 1), count_1st = fav(Name,1,T),
fav_2nd = fav(Name, 2), count_2nd = fav(Name,2,T),
fav_3rd = fav(Name, 3), count_3rd = fav(Name,3,T),
fav_4 = fav(Name, 4), count_4 = fav(Name,4,T),
fav_5 = fav(Name, 5), count_5 = fav(Name,5,T)
)
return(jsonlite::toJSON(as.data.frame(favfood_df)))
}
fav2_list <- function(file2){
mydf <- jsonlite::fromJSON(jsonlite::toJSON(file2))
print(str(mydf))
print((mydf))
View((mydf))
return(jsonlite::toJSON(file2))
}
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ipv4 <- gsub(".*? ([[:digit:]])", "\\1", z)[1]
jug() %>%
post("/customer", decorate(customer_list)) %>%
post("/fav1", decorate(fav_list)) %>%
post("/fav", decorate(fav2_list)) %>%
simple_error_handler_json() %>%
serve_it(port = 2000, host = ipv4)
library(jug)
library(dplyr)
customer_list <- function(file2){
df <- read.csv(file2[[4]])
print(df)
customer_df <- df %>% mutate(fullname_upper = toupper(Full.Name..Billing.)) %>%
group_by(fullname_upper) %>%
summarise(name = fullname_upper[1],
contact = paste0("_", Phone..Billing.[1]),
email = Email..Billing.[1],
address = Address.2..Billing.[1],
num_items_purchased = length(fullname_upper)) %>%
select(-1)
return(jsonlite::toJSON(as.data.frame(customer_df)))
}
fav_list <- function(file2){
# print(file2)
# a <- jsonlite::toJSON(file2)
# print(a)
# df <- read.csv(file2[[4]])
df <- jsonlite::fromJSON(jsonlite::toJSON(file2))
getsupp <- function(v){
v <- as.character(v)
supp <- c("Mr Rice Corner", "Pontian Noodle", "Meet Mee", "Lim Fried Chicken")
h <- v
for(suppj in supp){
h[grep(pattern = suppj, v, ignore.case = T)] <- suppj
}
return(h)
}
fav <- function(foodname, order, count = F){
uniq <- unique(foodname)
ss <- sapply(uniq, FUN = function(j){
sum(foodname == j, na.rm = T)
})
dd <- data.frame(uniq,ss)
if(count){
return(dd[order(ss, decreasing = T),][order,2])
}else{
return(dd[order(ss, decreasing = T),][order,1])
}
}
favfood_df <- df %>% mutate(supplier = getsupp(Category)) %>%
group_by(supplier) %>%
summarise(
fav_1st = fav(Name, 1), count_1st = fav(Name,1,T),
fav_2nd = fav(Name, 2), count_2nd = fav(Name,2,T),
fav_3rd = fav(Name, 3), count_3rd = fav(Name,3,T),
fav_4 = fav(Name, 4), count_4 = fav(Name,4,T),
fav_5 = fav(Name, 5), count_5 = fav(Name,5,T)
)
return(jsonlite::toJSON(as.data.frame(favfood_df)))
}
fav2_list <- function(file2){
mydf <- jsonlite::fromJSON(jsonlite::toJSON(file2))
print(str(mydf))
print((mydf))
View((mydf))
return(jsonlite::toJSON(file2))
}
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ipv4 <- gsub(".*? ([[:digit:]])", "\\1", z)[1]
jug() %>%
post("/customer", decorate(customer_list)) %>%
post("/fav", decorate(fav_list)) %>%
post("/fav1", decorate(fav2_list)) %>%
simple_error_handler_json() %>%
serve_it(port = 2000, host = ipv4)
library(jug)
library(dplyr)
customer_list <- function(file2){
df <- jsonlite::fromJSON(jsonlite::toJSON(file2))
customer_df <- df %>% mutate(fullname_upper = toupper(Full.Name..Billing.)) %>%
group_by(fullname_upper) %>%
summarise(name = fullname_upper[1],
contact = paste0("_", Phone..Billing.[1]),
email = Email..Billing.[1],
address = Address.2..Billing.[1],
num_items_purchased = length(fullname_upper)) %>%
select(-1)
return(jsonlite::toJSON(as.data.frame(customer_df)))
}
fav_list <- function(file2){
# print(file2)
# a <- jsonlite::toJSON(file2)
# print(a)
# df <- read.csv(file2[[4]])
df <- jsonlite::fromJSON(jsonlite::toJSON(file2))
getsupp <- function(v){
v <- as.character(v)
supp <- c("Mr Rice Corner", "Pontian Noodle", "Meet Mee", "Lim Fried Chicken")
h <- v
for(suppj in supp){
h[grep(pattern = suppj, v, ignore.case = T)] <- suppj
}
return(h)
}
fav <- function(foodname, order, count = F){
uniq <- unique(foodname)
ss <- sapply(uniq, FUN = function(j){
sum(foodname == j, na.rm = T)
})
dd <- data.frame(uniq,ss)
if(count){
return(dd[order(ss, decreasing = T),][order,2])
}else{
return(dd[order(ss, decreasing = T),][order,1])
}
}
favfood_df <- df %>% mutate(supplier = getsupp(Category)) %>%
group_by(supplier) %>%
summarise(
fav_1st = fav(Name, 1), count_1st = fav(Name,1,T),
fav_2nd = fav(Name, 2), count_2nd = fav(Name,2,T),
fav_3rd = fav(Name, 3), count_3rd = fav(Name,3,T),
fav_4 = fav(Name, 4), count_4 = fav(Name,4,T),
fav_5 = fav(Name, 5), count_5 = fav(Name,5,T)
)
return(jsonlite::toJSON(as.data.frame(favfood_df)))
}
fav2_list <- function(file2){
mydf <- jsonlite::fromJSON(jsonlite::toJSON(file2))
print(str(mydf))
print((mydf))
View((mydf))
return(jsonlite::toJSON(file2))
}
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ipv4 <- gsub(".*? ([[:digit:]])", "\\1", z)[1]
jug() %>%
post("/customer", decorate(customer_list)) %>%
post("/fav", decorate(fav_list)) %>%
post("/fav1", decorate(fav2_list)) %>%
simple_error_handler_json() %>%
serve_it(port = 2000, host = ipv4)
library(jug)
library(dplyr)
customer_list <- function(file2){
df <- jsonlite::fromJSON(jsonlite::toJSON(file2))
print(str(df))
customer_df <- df %>% mutate(fullname_upper = toupper(Full.Name..Billing.)) %>%
group_by(fullname_upper) %>%
summarise(name = fullname_upper[1],
contact = paste0("_", Phone..Billing.[1]),
email = Email..Billing.[1],
address = Address.2..Billing.[1],
num_items_purchased = length(fullname_upper)) %>%
select(-1)
return(jsonlite::toJSON(as.data.frame(customer_df)))
}
fav_list <- function(file2){
# print(file2)
# a <- jsonlite::toJSON(file2)
# print(a)
# df <- read.csv(file2[[4]])
df <- jsonlite::fromJSON(jsonlite::toJSON(file2))
getsupp <- function(v){
v <- as.character(v)
supp <- c("Mr Rice Corner", "Pontian Noodle", "Meet Mee", "Lim Fried Chicken")
h <- v
for(suppj in supp){
h[grep(pattern = suppj, v, ignore.case = T)] <- suppj
}
return(h)
}
fav <- function(foodname, order, count = F){
uniq <- unique(foodname)
ss <- sapply(uniq, FUN = function(j){
sum(foodname == j, na.rm = T)
})
dd <- data.frame(uniq,ss)
if(count){
return(dd[order(ss, decreasing = T),][order,2])
}else{
return(dd[order(ss, decreasing = T),][order,1])
}
}
favfood_df <- df %>% mutate(supplier = getsupp(Category)) %>%
group_by(supplier) %>%
summarise(
fav_1st = fav(Name, 1), count_1st = fav(Name,1,T),
fav_2nd = fav(Name, 2), count_2nd = fav(Name,2,T),
fav_3rd = fav(Name, 3), count_3rd = fav(Name,3,T),
fav_4 = fav(Name, 4), count_4 = fav(Name,4,T),
fav_5 = fav(Name, 5), count_5 = fav(Name,5,T)
)
return(jsonlite::toJSON(as.data.frame(favfood_df)))
}
fav2_list <- function(file2){
mydf <- jsonlite::fromJSON(jsonlite::toJSON(file2))
print(str(mydf))
print((mydf))
View((mydf))
return(jsonlite::toJSON(file2))
}
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ipv4 <- gsub(".*? ([[:digit:]])", "\\1", z)[1]
jug() %>%
post("/customer", decorate(customer_list)) %>%
post("/fav", decorate(fav_list)) %>%
post("/fav1", decorate(fav2_list)) %>%
simple_error_handler_json() %>%
serve_it(port = 2000, host = ipv4)
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
lgb.dl(commit = "master",
compiler = "vs",
repo = "https://github.com/Microsoft/LightGBM")
lgbdl::lgb.dl(commit = "master",
compiler = "vs",
repo = "https://github.com/Microsoft/LightGBM")
online_rdata_url <- "https://drive.google.com/uc?export=download&id=0B4F6ZaPqFhLXOEMtZUU3dzBuM1E"
cat("\n\n...Loading online .rda\n\n")
con <- file(online_rdata_url)
load(con, envir = .GlobalEnv)
close(con)
str(plot_df)
str(plot_df_list)
df <- do.call(rbind, plot_df_list)
str(df)
library(dplyr)
df %>% group_by(stock) %>% select(close)
library('RPostgreSQL')
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="postgres", password="",
host="localhost", port=5432, dbname="ninazumel")
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="postgres", password="",
host="localhost", port=5432, dbname="ninazumel")
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="postgres", password="abcd4321",
host="localhost", port=5432, dbname="postgres")
setwd("C:/Users/jy/Desktop/intri/purge_intri/daily_exchange_data_20171110")
dir("*.csv")
dir(pattern = "*.csv")
filenames <- dir(pattern = "*.csv")
a <- lapply(filenames[1:2], FUN = function(j){
read.csv(j, skip = 1)
})
a
1 | 0
0 | 0
1 || 0
0 || 0
setwd("C:/Users/jy/Desktop/intri/purge_intri/daily_exchange_data_20171110")
filenames <- dir(pattern = "*.csv")
replace <- function(df, replacewhat = "OPEN", replacewith = "CLOSE"){
u1 <- is.na(df[,imputewhat]) || df[,imputewhat] == 0
df[u1, imputewhat] <- df[u1, replacewith]
return(df)
}
imputezero <- function(df, imputewhat = "VOLUME"){
u1 <- is.na(df[,imputewhat])
df[u1, imputewhat] <- 0
return(df)
}
a <- lapply(filenames[1:2], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
return(df)
})
replace <- function(df, replacewhat = "OPEN", replacewith = "CLOSE"){
u1 <- is.na(df[,imputewhat]) || df[,imputewhat] == 0
df[u1, imputewhat] <- df[u1, replacewith]
return(df)
}
a <- lapply(filenames[1:2], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
return(df)
})
replace <- function(df, replacewhat = "OPEN", replacewith = "CLOSE"){
u1 <- is.na(df[,imputewhat]) || df[,imputewhat] == 0
df[u1, imputewhat] <- df[u1, replacewith]
return(df)
}
imputezero <- function(df, imputewhat = "VOLUME"){
u1 <- is.na(df[,imputewhat])
df[u1, imputewhat] <- 0
return(df)
}
a <- lapply(filenames[1:2], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
return(df)
})
a <- lapply(filenames[1], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
return(df)
})
replace <- function(df, replacewhat = "OPEN", replacewith = "CLOSE"){
u1 <- is.na(df[,replacewhat]) || df[,replacewhat] == 0
df[u1, replacewhat] <- df[u1, replacewith]
return(df)
}
imputezero <- function(df, imputewhat = "VOLUME"){
u1 <- is.na(df[,imputewhat])
df[u1, imputewhat] <- 0
return(df)
}
a <- lapply(filenames[1], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
return(df)
})
a
a <- lapply(filenames[1], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
df <- replace(df, "VOLUME")
df <- replace(df, "ADJ_VOLUME")
return(df)
})
a
imputezero <- function(df, imputewhat = "VOLUME"){
u1 <- is.na(df[,imputewhat])
df[u1, imputewhat] <- 0
return(df)
}
a <- lapply(filenames[1], FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
df <- imputezero(df, "VOLUME")
df <- imputezero(df, "ADJ_VOLUME")
return(df)
})
a
a <- lapply(filenames, FUN = function(j){
df <- read.csv(j, skip = 1)
df <- replace(df, "OPEN", "CLOSE")
df <- replace(df, "HIGH", "CLOSE")
df <- replace(df, "LOW", "CLOSE")
df <- replace(df, "ADJ_OPEN", "ADJ_CLOSE")
df <- replace(df, "ADJ_HIGH", "ADJ_CLOSE")
df <- replace(df, "ADJ_LOW", "ADJ_CLOSE")
df <- imputezero(df, "VOLUME")
df <- imputezero(df, "ADJ_VOLUME")
return(df)
})
fdf <- do.call(rbind, a)
head(fdf)
fill_ticker <- function(ticker){
n <- nchar(ticker)
if(n < 4){
return(paste0(rep("0", 4-n),ticker))
}else{
return(as.character(ticker))
}
}
fill_ticker("1")
fill_ticker(1)
rep("0", 4-n)
fill_ticker <- function(ticker){
n <- nchar(ticker)
if(n < 4){
for(i in 1:(n-4)){
ticker <- paste0("0",ticker)
}
}else{
return(as.character(ticker))
}
}
fill_ticker(1)
fill_ticker <- function(ticker){
n <- nchar(ticker)
if(n < 4){
for(i in 1:(n-4)){
ticker <- paste0("0",ticker)
}
return(ticker)
}else{
return(as.character(ticker))
}
}
fill_ticker(1)
fill_ticker <- function(ticker){
n <- nchar(ticker)
if(n < 4){
for(i in 1:(4-n)){
ticker <- paste0("0",ticker)
}
return(ticker)
}else{
return(as.character(ticker))
}
}
fill_ticker(1)
fill_ticker(22)
fill_ticker(4442)
fill_ticker(4442a)
fill_ticker(4442a)
fill_ticker(44422)
fill_ticker("444a")
fill_ticker("444aaa")
fill_ticker("4")
fill_ticker("a")
fill_ticker <- function(ticker){
n <- nchar(ticker)
if(n < 4){
for(i in 1:(4-n)){
ticker <- paste0("0",ticker)
}
return(ticker)
}else{
return(as.character(ticker))
}
}
head(fdf)
fdf[,"TICKER"] <- fill_ticker(fdf[,"TICKER"])
fdf[,"TICKER"] <- sapply((fdf[,"TICKER"]), FUN = fill_ticker)
head(fdF)
head(fdf)
save(fdf, file = "../20171110_fdf_intri.rda")
write.csv(fdf, file = "20171110_fdf.csv", row.names = F)
